// GENERATED by @edgedb/generate v0.4.1

import * as $ from "../reflection";
import * as _ from "../imports";
import type * as _std from "./std";
export declare type $Role = {
  "admin": $.$expr_Literal<$Role>;
  "user": $.$expr_Literal<$Role>;
} & $.EnumType<"default::Role", ["admin", "user"]>;
declare const Role: $Role

export declare type $Status = {
  "active": $.$expr_Literal<$Status>;
  "archived": $.$expr_Literal<$Status>;
} & $.EnumType<"default::Status", ["active", "archived"]>;
declare const Status: $Status

export declare type $HasTimestampλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "created_at": $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, false, true>;
}>;
declare type $HasTimestamp = $.ObjectType<"default::HasTimestamp", $HasTimestampλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
]>;
declare const $HasTimestamp: $HasTimestamp

declare const HasTimestamp: $.$expr_PathNode<$.TypeSet<$HasTimestamp, $.Cardinality.Many>, null> 

export declare type $ClientλShape = $.typeutil.flatten<$HasTimestampλShape & {
  "city": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "state": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "street": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "zip": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "address": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, true, false, false>;
  "company_name": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "email": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "first_name": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "last_name": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "full_name": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, true, false, false>;
  "phone": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "status": $.PropertyDesc<$Status, $.Cardinality.AtMostOne, false, false, false, true>;
  "jobs": $.LinkDesc<$Job, $.Cardinality.Many, {}, false, true,  false, false>;
  "user": $.LinkDesc<$User, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "<client[is Job]": $.LinkDesc<$Job, $.Cardinality.Many, {}, false, false,  false, false>;
  "<clients[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<client": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<clients": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
declare type $Client = $.ObjectType<"default::Client", $ClientλShape, null, [
  ...$HasTimestamp['__exclusives__'],
]>;
declare const $Client: $Client

declare const Client: $.$expr_PathNode<$.TypeSet<$Client, $.Cardinality.Many>, null> 

export declare type $CommentλShape = $.typeutil.flatten<$HasTimestampλShape & {
  "content": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "author": $.LinkDesc<$User, $.Cardinality.One, {}, false, false,  false, false>;
  "post": $.LinkDesc<$Post, $.Cardinality.One, {}, false, false,  false, false>;
  "<comments[is Post]": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, false,  false, false>;
  "<comments": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
declare type $Comment = $.ObjectType<"default::Comment", $CommentλShape, null, [
  ...$HasTimestamp['__exclusives__'],
]>;
declare const $Comment: $Comment

declare const Comment: $.$expr_PathNode<$.TypeSet<$Comment, $.Cardinality.Many>, null> 

export declare type $CostλShape = $.typeutil.flatten<$HasTimestampλShape & {
  "job": $.LinkDesc<$Job, $.Cardinality.One, {}, false, false,  false, false>;
  "amount": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "tags": $.LinkDesc<$Tag, $.Cardinality.Many, {}, false, false,  false, false>;
  "description": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "job_date": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "purchase_date": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "tax": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "vendor": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "<costs[is Job]": $.LinkDesc<$Job, $.Cardinality.Many, {}, false, false,  false, false>;
  "<costs": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
declare type $Cost = $.ObjectType<"default::Cost", $CostλShape, null, [
  ...$HasTimestamp['__exclusives__'],
]>;
declare const $Cost: $Cost

declare const Cost: $.$expr_PathNode<$.TypeSet<$Cost, $.Cardinality.Many>, null> 

export declare type $JobλShape = $.typeutil.flatten<$HasTimestampλShape & {
  "client": $.LinkDesc<$Client, $.Cardinality.One, {}, false, false,  false, false>;
  "tags": $.LinkDesc<$Tag, $.Cardinality.Many, {}, false, false,  false, false>;
  "beg_date": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "end_date": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "title": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "costs": $.LinkDesc<$Cost, $.Cardinality.Many, {}, false, true,  false, false>;
  "total_cost": $.PropertyDesc<_std.$decimal, $.Cardinality.One, false, true, false, false>;
  "payments": $.LinkDesc<$Payment, $.Cardinality.Many, {}, false, true,  false, false>;
  "total_earn": $.PropertyDesc<_std.$decimal, $.Cardinality.One, false, true, false, false>;
  "<jobs[is Client]": $.LinkDesc<$Client, $.Cardinality.Many, {}, false, false,  false, false>;
  "<job[is Cost]": $.LinkDesc<$Cost, $.Cardinality.Many, {}, false, false,  false, false>;
  "<job[is Payment]": $.LinkDesc<$Payment, $.Cardinality.Many, {}, false, false,  false, false>;
  "<job": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<jobs": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
declare type $Job = $.ObjectType<"default::Job", $JobλShape, null, [
  ...$HasTimestamp['__exclusives__'],
]>;
declare const $Job: $Job

declare const Job: $.$expr_PathNode<$.TypeSet<$Job, $.Cardinality.Many>, null> 

export declare type $PaymentλShape = $.typeutil.flatten<$HasTimestampλShape & {
  "job": $.LinkDesc<$Job, $.Cardinality.One, {}, false, false,  false, false>;
  "amount": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "tags": $.LinkDesc<$Tag, $.Cardinality.Many, {}, false, false,  false, false>;
  "date": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "description": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "<payments[is Job]": $.LinkDesc<$Job, $.Cardinality.Many, {}, false, false,  false, false>;
  "<payments": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
declare type $Payment = $.ObjectType<"default::Payment", $PaymentλShape, null, [
  ...$HasTimestamp['__exclusives__'],
]>;
declare const $Payment: $Payment

declare const Payment: $.$expr_PathNode<$.TypeSet<$Payment, $.Cardinality.Many>, null> 

export declare type $PostλShape = $.typeutil.flatten<$HasTimestampλShape & {
  "author": $.LinkDesc<$User, $.Cardinality.One, {}, false, false,  false, false>;
  "tags": $.LinkDesc<$Tag, $.Cardinality.Many, {}, false, false,  false, false>;
  "content": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "image_src": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "slug": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "snippet": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "title": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "comments": $.LinkDesc<$Comment, $.Cardinality.Many, {}, false, true,  false, false>;
  "<post[is Comment]": $.LinkDesc<$Comment, $.Cardinality.Many, {}, false, false,  false, false>;
  "<post": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
declare type $Post = $.ObjectType<"default::Post", $PostλShape, null, [
  ...$HasTimestamp['__exclusives__'],
  {slug: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
declare const $Post: $Post

declare const Post: $.$expr_PathNode<$.TypeSet<$Post, $.Cardinality.Many>, null> 

export declare type $TagλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "<tags[is Job]": $.LinkDesc<$Job, $.Cardinality.Many, {}, false, false,  false, false>;
  "<tags[is Post]": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, false,  false, false>;
  "<tags[is Cost]": $.LinkDesc<$Cost, $.Cardinality.Many, {}, false, false,  false, false>;
  "<tags[is Payment]": $.LinkDesc<$Payment, $.Cardinality.Many, {}, false, false,  false, false>;
  "<tags": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
declare type $Tag = $.ObjectType<"default::Tag", $TagλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
  {name: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
declare const $Tag: $Tag

declare const Tag: $.$expr_PathNode<$.TypeSet<$Tag, $.Cardinality.Many>, null> 

export declare type $UserλShape = $.typeutil.flatten<$HasTimestampλShape & {
  "avatar_src": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "email": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "first_name": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "last_name": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "full_name": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, true, false, false>;
  "password_hash": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "role": $.PropertyDesc<$Role, $.Cardinality.AtMostOne, false, false, false, true>;
  "user_auth_token": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, true, false, false, false>;
  "username": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "clients": $.LinkDesc<$Client, $.Cardinality.Many, {}, false, true,  false, false>;
  "<author[is Comment]": $.LinkDesc<$Comment, $.Cardinality.Many, {}, false, false,  false, false>;
  "<author[is Post]": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, false,  false, false>;
  "<user[is Client]": $.LinkDesc<$Client, $.Cardinality.Many, {}, false, false,  false, false>;
  "<author": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<user": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
declare type $User = $.ObjectType<"default::User", $UserλShape, null, [
  ...$HasTimestamp['__exclusives__'],
  {user_auth_token: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
  {email: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
  {username: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
declare const $User: $User

declare const User: $.$expr_PathNode<$.TypeSet<$User, $.Cardinality.Many>, null> 



export { Role, Status, $HasTimestamp, HasTimestamp, $Client, Client, $Comment, Comment, $Cost, Cost, $Job, Job, $Payment, Payment, $Post, Post, $Tag, Tag, $User, User };

declare type __defaultExports = {
  "Role": typeof Role;
  "Status": typeof Status;
  "HasTimestamp": typeof HasTimestamp;
  "Client": typeof Client;
  "Comment": typeof Comment;
  "Cost": typeof Cost;
  "Job": typeof Job;
  "Payment": typeof Payment;
  "Post": typeof Post;
  "Tag": typeof Tag;
  "User": typeof User
};
declare const __defaultExports: __defaultExports;
export default __defaultExports;
